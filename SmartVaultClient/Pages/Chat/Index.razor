@page "/chat"
@attribute [Authorize()]
@inject NavigationManager navigationManager
@inject IAccountService AccountService
@using Microsoft.AspNetCore.SignalR.Client;


    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span>Token count: <b>@(_user?.TokensUsed)/@(_user?.TokenLimit)</b></span>
    </div>
    
   <div id="scrollbox">
        @foreach (var item in _messages)
        {
            @if (item.IsNotice)
            {
                <div class="alert alert-info">@item.Body</div>
            }
            else
            {
                <div class="@item.CSS">
                    <div class="user">@item.Username</div>
                    <div class="msg">@item.Body</div>
                </div>
            }
        }
        <hr />
        <textarea class="input-lg" placeholder="enter your comment" @bind="@_newMessage"></textarea>
        <button class="btn btn-default" @onclick="@(() => SendAsync(_newMessage))">Send</button>
    </div>


@code {
    // name of the user who will be chatting
    private User? _user;

    // on-screen message
    private string? _message;

    // new message input
    private string? _newMessage;

    // list of messages in chat
    private List<Message> _messages = new List<Message>();

    private string? _hubUrl;
    private HubConnection? _hubConnection;
    protected override async Task OnInitializedAsync()
    {
        _user = AccountService.User;
    }

    public async Task Chat()
    {
        // check username is valid
        if (string.IsNullOrWhiteSpace(_user?.Username))
        {
            _message = "Please enter a name";
            return;
        }; 

        try
        {
            // Start chatting and force refresh UI.
            await Task.Delay(1);

            // remove old messages if any
            _messages.Clear();

            // Create the chat client
            string baseUrl = navigationManager.BaseUri;

            _hubUrl = baseUrl.TrimEnd('/') + "/chat";

            _hubConnection = new HubConnectionBuilder()
                .WithUrl(_hubUrl)
                .Build();

            _hubConnection.On<string, string>("Broadcast", BroadcastMessage);

            await _hubConnection.StartAsync();

            @* await SendAsync($"[Notice] {_username} joined chat room."); *@
        }
        catch (Exception e)
        {
            _message = $"ERROR: Failed to start chat client: {e.Message}";
        }
    }

    private void BroadcastMessage(string name, string message)
    {
        bool isMine = name.Equals(_user?.Username, StringComparison.OrdinalIgnoreCase);

        _messages.Add(new Message(name, message, isMine));

        // Inform blazor the UI needs updating
        InvokeAsync(StateHasChanged);
    }

    private async Task SendAsync(string message)
    {
        if (!string.IsNullOrWhiteSpace(message))
        {
            await _hubConnection.SendAsync("Broadcast", _user?.Username, message);

            _newMessage = string.Empty;
        }
    }

    private class Message
    {
        public Message(string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }

        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }

        public bool IsNotice => Body.StartsWith("[Notice]");

        public string CSS => Mine ? "sent" : "received";
    }
}